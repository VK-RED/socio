datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  password      String?

  image         String?
  accounts      Account[]
  sessions      Session[]

  posts Post[]
  comments Comment[]
  likes  Like[]

  pendingFriends  User[]  @relation(name: "UserFriends")
  friends   User[]        @relation(name: "UserFriends")
}


model Post {
  id        String    @id @default(cuid())
  image     String
  content   String?
  published Boolean? @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String

  comments  Comment[]  
  likes     Like[]
}

model Comment{
  id      String    @id @default(cuid())
  content String
  
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String

  post      Post   @relation(fields: [postId], references: [id])
  postId    String

  likes     Like[]
}

model Like{
  id    String    @id @default(cuid())

  //author details
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String

  //Can be liked on a post
  post      Post?       @relation(fields: [postId], references: [id])
  postId    String?

  //Can be liked on a comment
  comment    Comment?   @relation(fields: [commentId], references: [id])
  commentId  String?

}